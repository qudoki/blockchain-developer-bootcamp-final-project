{"version":3,"sources":["getWeb3.js","components/Switch/switch.js","components/Popup/popup.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Switch","props","toggleForSale","piece","toggleStates","accounts","owners","useState","isToggled","setIsToggled","className","type","checked","onChange","Popup","show","onClose","tokenURIs","numberOfTransfers","buyToken","tokenIds","titles","prices","artists","getForSale","Modal","onHide","animation","backdrop","size","Header","closeButton","onClick","Body","Col","alt","src","balance","totalTokensOwnedByAccount","require","config","url","App","setWeb3","setAccounts","setAccountBalance","contract","setContract","setTokenIds","setTokenURIs","setOwners","setTitles","setArtists","setPrices","setNumberOfTransfers","setToggleStates","nftCollection","setNftCollection","totalTokensMinted","setTotalTokensMinted","setTotalTokensOwnedByAccount","setShow","handleShow","setPiece","nftArray","name","title","artist","tokenURI","minter","owner","price","loadWeb3","currentProvider","alert","loadBlockchainData","eth","getAccounts","length","net","getId","networkId","deployedNetwork","NFT","networks","instance","Contract","abi","address","getBalance","then","result","utils","fromWei","addCurrentMinter","x","methods","addMinter","send","from","res","mintAllNfts","i","mint","location","reload","checkMintedTokens","getNumberOfTokensMinted","call","minted","getTotalNumberOfTokensOwnedByAnAddress","ownerTokens","getItem","returnedItem","error","loadState","tokenId","returnedTokenId","returnedTitle","returnedArtist","returnedUri","currentOwner","returnedOwner","returnedNoTransfers","returnedPrices","forSale","returnedToggleStates","wei","toWei","buy","value","on","useEffect","character","document","querySelector","map","y","heldDirections","placeCharacter","pixelSize","parseInt","getComputedStyle","documentElement","getPropertyValue","heldDirection","directions","right","left","down","up","setAttribute","camera_left","camera_top","style","transform","step","requestAnimationFrame","openModal","event","keyCode","keys","38","37","39","40","e","dir","which","indexOf","unshift","index","splice","init","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67671daf.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.ethereum) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.ethereum;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState } from \"react\";\n// import { REGEXP_LOADERS } from \"webpack/lib/ModuleFilenameHelpers\";\nimport \"./switch.css\";\n\nconst Switch = (props) => {\n\tconst {\n\t\ttoggleForSale,\n\t\tpiece,\n\t\ttoggleStates,\n\t\t// getForSale,\n\t\taccounts,\n\t\towners,\n\t} = props;\n\tconst [isToggled, setIsToggled] = useState(toggleStates[piece]);\n\tconst onToggle = () => {\n\t\tif (accounts === owners[piece]) {\n\t\t\tsetIsToggled(!isToggled);\n\t\t\ttoggleStates[piece] = !toggleStates[piece];\n\t\t\ttoggleForSale(piece)\n\t\t\t// console.log(toggleStates);\n\t\t}\n\t};\n\treturn (\n\t\t<>\n\t\t\t<label className=\"toggle-switch\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={isToggled}\n\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\tonToggle();\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<span className=\"switch\" />\n\t\t\t</label>\n\t\t</>\n\t);\n};\n\nexport default Switch;\n","import React, { } from \"react\";\nimport { Col, Modal } from \"react-bootstrap\";\nimport Switch from \"../Switch/switch\";\nimport \"./popup.css\";\n\nconst Popup = (props) => {\n\tconst { show, onClose, toggleForSale, tokenURIs, numberOfTransfers, buyToken, tokenIds, titles, piece, prices, artists, owners, toggleStates, accounts, getForSale } = props;\n\n\treturn (\n\t\t<Modal\n\t\t\tshow={show}\n\t\t\tonHide={onClose}\n\t\t\tanimation={true}\n\t\t\tclassName=\"modal\"\n\t\t\tbackdrop=\"static\"\n\t\t\tsize=\"lg\"\n\t\t>\n\t\t\t<Modal.Header closeButton onClick={onClose}></Modal.Header>\n\t\t\t<Modal.Body className=\"modalBody\">\n\t\t\t<h6 className=\"header\">Your Selection: Token {tokenIds[piece]}</h6>\n\n\t\t\t\t<Col className=\"org1\">\n\t\t\t\t\t<p className=\"title\">Title: {titles[piece]}</p>\n\t\t\t\t\t<p className=\"artist\">Artist: {artists[piece]}</p>\n\t\t\t\t\t<p className=\"artist\">Owner: {owners[piece]}</p>\n\t\t\t\t</Col>\n\t\t\t\t<Col className=\"org2\">\n\t\t\t\t\t<p className=\"artist\"># Transfers: {numberOfTransfers[piece]}</p>\n\t\t\t\t\t<p className=\"forSale\">Availability\n\t\t\t\t\t<Switch\n\t\t\t\t\t\tpiece={piece}\n\t\t\t\t\t\ttoggleStates={toggleStates}\n\t\t\t\t\t\ttoggleForSale={toggleForSale}\n\t\t\t\t\t\tgetForSale={getForSale}\n\t\t\t\t\t\towners={owners}\n\t\t\t\t\t\taccounts={accounts}\n\t\t\t\t\t/>\n\t\t\t\t\t</p>\n\t\t\t\t</Col>\n\t\t\t\t<div className=\"art\">\n\t\t\t\t\t<img\n\t\t\t\t\t\tclassName=\"image\"\n\t\t\t\t\t\talt=\"sampleimg\"\n\t\t\t\t\t\tsrc=\n\t\t\t\t\t\t{tokenURIs[piece]}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<button className=\"mainBtn\" onClick={() => buyToken(piece)}>\n\t\t\t\t\t\tPURCHASE FOR Ξ {prices[piece]} ETHER\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t\t<h6 className=\"header\">Your Account</h6>\n\t\t\t\t<Col className=\"org1\">\n\n\t\t\t\t\t<p className=\"balance\">Balance: Ξ {props.balance} ether</p>\n\t\t\t\t\t<p className=\"address\">Address: {props.accounts}</p>\n\t\t\t\t</Col>\n\t\t\t\t<Col className=\"org2\">\n\t\t\t\t<p className=\"balance\">NFT Count: {props.totalTokensOwnedByAccount || \"0\" } </p>\n\t\t\t\t</Col>\n\t\t\t</Modal.Body>\n\t\t</Modal>\n\t);\n};\n\nexport default Popup;\n","import React, { useState, useEffect } from \"react\";\n// import React, { Component } from \"react\";\n// import { NFTStorage, File } from \"nft.storage\";\nimport NFT from \"./contracts/NFT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Popup from \"./components/Popup/popup.js\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\n\n// This is the top of application.js\nrequire(\"dotenv\").config();\n\n// // Using NFT Storage API Key from dotenv\n// const apiKey = process.env.NFT_STORAGE_API_KEY;\n// const client = new NFTStorage({ token: apiKey });\n// // const metadata = await client.store({\n// // })\n\n// Hard coding the nft data for minting all at once\n// const gallery = \"0x78f45c83963E2388e3ef994784c3Ca8C83bDb6A1\";\n// const buyer = \"0x0643C89ed06c61A65A98Ae40D635458F9f1a7b9a\";\nconst url = \"https://ipfs.io/ipfs/\";\n\nfunction App() {\n\t// State variables\n\tconst [web3, setWeb3] = useState(null);\n\tconst [accounts, setAccounts] = useState([]);\n\tconst [balance, setAccountBalance] = useState(\"\");\n\tconst [contract, setContract] = useState(null);\n\tconst [tokenIds, setTokenIds] = useState([]);\n\tconst [tokenURIs, setTokenURIs] = useState([]);\n\tconst [owners, setOwners] = useState([]);\n\tconst [titles, setTitles] = useState([]);\n\tconst [artists, setArtists] = useState([]);\n\tconst [prices, setPrices] = useState([]);\n\tconst [numberOfTransfers, setNumberOfTransfers] = useState([]);\n\t// const [isToggled, setIsToggled] = useState(true);\n\t// const [forSale, setForSale] = useState(false);\n\tconst [toggleStates, setToggleStates] = useState([]);\n\n\tconst [nftCollection, setNftCollection] = useState([]);\n\tconst [totalTokensMinted, setTotalTokensMinted] = useState(0);\n\tconst [totalTokensOwnedByAccount, setTotalTokensOwnedByAccount] = useState(0);\n\tconst [show, setShow] = useState(false);\n\tconst handleShow = () => setShow(true);\n\tconst handleClose = () => setShow(false);\n\tconst [piece, setPiece] = useState(null);\n\n\tlet nftArray = [\n\t\t{\n\t\t\tname: \"moon\",\n\t\t\ttitle: \"White Moon Over Blue Seascape\",\n\t\t\tartist: \"Rebecca Johnson\",\n\t\t\ttokenURI:\n\t\t\t\turl + \"bafybeigmzl32jd3c7xiqtd4nphmjwkxgs4dvxqvmfqv7sk3xdhdwpublny\",\n\t\t\tminter: accounts,\n\t\t\towner: accounts,\n\t\t\tprice: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"wolf\",\n\t\t\ttitle: \"White Wolf Over Red Landscape\",\n\t\t\tartist: \"Rebecca Johnson\",\n\t\t\ttokenURI:\n\t\t\t\turl + \"bafybeig3l6fag6fbzzxj3syzxco3ul6j2uy5ocyxx7j3m4t7hmsdqwc66i\",\n\t\t\t\tminter: accounts,\n\t\t\t\towner: accounts,\n\t\t\tprice: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"flower\",\n\t\t\ttitle: \"Flower Over Purple Desert\",\n\t\t\tartist: \"Rebecca Johnson\",\n\t\t\ttokenURI:\n\t\t\t\turl + \"bafybeiflu2fdax4i7o6g2eoyu6to7qs7cdol5s3vmqsnvpc6nml4tfo5ju\",\n\t\t\t\tminter: accounts,\n\t\t\t\towner: accounts,\n\t\t\tprice: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"stork\",\n\t\t\ttitle: \"Red Stork Over White Gaudi Feature\",\n\t\t\tartist: \"Rebecca Johnson\",\n\t\t\ttokenURI:\n\t\t\t\turl + \"bafybeia23kjkkvtgxwbxqhojdbzlmxxuhi7ffuxfuerot4hzpe7umttjva\",\n\t\t\t\tminter: accounts,\n\t\t\t\towner: accounts,\n\t\t\tprice: 1,\n\t\t},\n\t\t{\n\t\t\tname: \"disco\",\n\t\t\tartist: \"Rebecca Johnson\",\n\t\t\ttokenURI:\n\t\t\t\turl + \"bafybeido4wnjbmthgpygr5wubsiodnavmdbmlf7hbp262leaptffls2qdm\",\n\t\t\ttitle: \"Disco Ball Over Red Partyscape\",\n\t\t\tminter: accounts,\n\t\t\towner: accounts,\n\t\t\tprice: 1,\n\t\t},\n\t];\n\n\t// Load Web3\n\tconst loadWeb3 = async () => {\n\t\tif (window.ethereum) {\n\t\t\twindow.web3 = new Web3(window.ethereum);\n\t\t} else if (window.web3) {\n\t\t\twindow.web3 = new Web3(window.web3.currentProvider);\n\t\t} else {\n\t\t\twindow.alert(\"Non-Ethereum browser detected. Please use Metamask!\");\n\t\t}\n\t};\n\n\t// Load Blockchain data\n\tconst loadBlockchainData = async () => {\n\t\tconst web3 = await getWeb3();\n\t\t// Use web3 to get the user's accounts.\n\t\tconst accounts = await web3.eth.getAccounts();\n\t\tif (accounts.length === 0) {\n\t\t\tconsole.log(\"No accounts loaded!\");\n\t\t} else {\n\t\t\t// Get the contract instance.\n\t\t\tconst networkId = await web3.eth.net.getId();\n\t\t\tconst deployedNetwork = NFT.networks[networkId];\n\t\t\tconst instance = new web3.eth.Contract(NFT.abi, deployedNetwork.address);\n\t\t\tsetContract(instance);\n\t\t\t// Set account to first\n\t\t\tsetAccounts(accounts[0]);\n\t\t\t// Get balance and set\n\t\t\tconst balance = await web3.eth\n\t\t\t\t.getBalance(accounts[0])\n\t\t\t\t.then((result) => web3.utils.fromWei(result, \"ether\"));\n\t\t\tsetAccountBalance(balance);\n\t\t\t// Set web3, accounts, and contract to the state\n\t\t\tsetWeb3(web3);\n\t\t}\n\t};\n\t// Add minter\n\tconst addCurrentMinter = async (x) => {\n\t\tconst res = await contract.methods.addMinter(x).send({ from: accounts });\n\t\tconsole.log(res);\n\t};\n\n\t// Mint all NFTs\n\tconst mintAllNfts = async () => {\n\t\tfor (let i = 0; i < nftArray.length; i++) {\n\t\t\tawait contract.methods\n\t\t\t\t.mint(\n\t\t\t\t\tnftArray[i].name,\n\t\t\t\t\tnftArray[i].title,\n\t\t\t\t\tnftArray[i].artist,\n\t\t\t\t\tnftArray[i].tokenURI,\n\t\t\t\t\tnftArray[i].minter,\n\t\t\t\t\tnftArray[i].owner,\n\t\t\t\t\tnftArray[i].price\n\t\t\t\t)\n\t\t\t\t.send({ from: accounts });\n\t\t}\n\t\twindow.location.reload();\n\t};\n\n\t// Check quantity of total minted tokens and set to address count\n\tconst checkMintedTokens = async () => {\n\t\tconst minted = await contract.methods.getNumberOfTokensMinted().call();\n\t\tsetTotalTokensMinted(minted);\n\t\tconst ownerTokens = await contract.methods\n\t\t\t.getTotalNumberOfTokensOwnedByAnAddress(accounts)\n\t\t\t.call();\n\t\tsetTotalTokensOwnedByAccount(ownerTokens);\n\t\t// Get all token info and set to state\n\t\ttry {\n\t\t\tfor (let i = 1; i < 6; i++) {\n\t\t\t\tconst returnedItem = await contract.methods.getItem(i).call();\n\t\t\t\tsetNftCollection((nftCollection) => [...nftCollection, returnedItem]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Catch any errors for any of the above operations.\n\t\t\talert(`Failed to set to nftCollection in state.`);\n\t\t\tconsole.error(error);\n\t\t}\n\t};\n\n\tconst loadState = async () => {\n\t\tfor (let i = 0; i < 5; i++) {\n\t\t\tconst returnedTokenId = await nftCollection[i].tokenId;\n\t\t\tsetTokenIds((tokenIds) => [...tokenIds, returnedTokenId]);\n\t\t\tconst returnedTitle = await nftCollection[i].title;\n\t\t\tsetTitles((titles) => [...titles, returnedTitle]);\n\t\t\tconst returnedArtist = await nftCollection[i].artist;\n\t\t\tsetArtists((artists) => [...artists, returnedArtist]);\n\t\t\tconst returnedUri = await nftCollection[i].tokenURI;\n\t\t\tsetTokenURIs((tokenURIs) => [...tokenURIs, returnedUri]);\n\t\t\tconst returnedOwner = await nftCollection[i].currentOwner;\n\t\t\tsetOwners((owners) => [...owners, returnedOwner]);\n\t\t\tconst returnedNoTransfers = await nftCollection[i].numberOfTransfers;\n\t\t\tsetNumberOfTransfers((numberOfTransfers) => [\n\t\t\t\t...numberOfTransfers,\n\t\t\t\treturnedNoTransfers,\n\t\t\t]);\n\t\t\tconst returnedPrices = await nftCollection[i].price;\n\t\t\tsetPrices((prices) => [...prices, returnedPrices]);\n\t\t\tconst returnedToggleStates = await nftCollection[i].forSale;\n\t\t\tsetToggleStates((toggleStates) => [...toggleStates, returnedToggleStates]);\n\t\t}\n\t};\n\n\t// Buy function working\n\tconst buyToken = async (x) => {\n\t\tif (owners[x] === accounts) {\n\t\t\talert(\"You are already the owner of this piece.\");\n\t\t} else {\n\t\t\tconst wei = web3.utils.toWei(prices[x], \"ether\")\n\t\t\tawait contract.methods\n\t\t\t\t.buy(x + 1)\n\t\t\t\t.send({ from: accounts, value: wei })\n\t\t\t\t.on(\"confirmation\", () => {\n\t\t\t\t\tconsole.log(\"Bought!\");\n\t\t\t\t});\n\t\t\twindow.location.reload();\n\t\t}\n\t};\n\n\t// Toggle forSale\n\tconst toggleForSale = async (x) => {\n\t\tif (accounts === owners[x]) {\n\t\t\tcontract.methods\n\t\t\t\t.toggleForSale(x)\n\t\t\t\t.send({ from: accounts })\n\t\t\t\t.on(\"confirmation\", () => {\n\t\t\t\t\tconsole.log(\"Toggled!\");\n\t\t\t\t});\n\t\t\t\tawait checkMintedTokens();\n\t\t\t\tloadState();\n\t\t} else {\n\t\t\talert(\"Only the owner can change the availability!\");\n\t\t\treturn;\n\t\t}\n\t};\n\n\t// const getForSale = async (x) => {\n\t// \tconst forSaleStatus = await contract.methods.getForSale(x)\n\t// \t\t.call();\n\t// \tconsole.log(forSaleStatus);\n\t// }\n\n\t// Connecting to web3 and getting initial balances, and sets off character\n\tuseEffect(() => {\n\t\tconst init = async () => {\n\t\t\t// character movement logic\n\t\t\tvar character = document.querySelector(\".Character\");\n\t\t\tvar map = document.querySelector(\".map\");\n\n\t\t\t// state of character\n\t\t\tvar x = 40;\n\t\t\tvar y = 35;\n\t\t\tvar heldDirections = [];\n\t\t\tvar speed = 0.75;\n\n\t\t\tconst placeCharacter = () => {\n\t\t\t\tvar pixelSize = parseInt(\n\t\t\t\t\tgetComputedStyle(document.documentElement).getPropertyValue(\n\t\t\t\t\t\t\"--pixel-size\"\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\tconst heldDirection = heldDirections[0];\n\t\t\t\tif (heldDirection) {\n\t\t\t\t\tif (heldDirection === directions.right) {\n\t\t\t\t\t\tx += speed;\n\t\t\t\t\t}\n\t\t\t\t\tif (heldDirection === directions.left) {\n\t\t\t\t\t\tx -= speed;\n\t\t\t\t\t}\n\t\t\t\t\tif (heldDirection === directions.down) {\n\t\t\t\t\t\ty += speed;\n\t\t\t\t\t}\n\t\t\t\t\tif (heldDirection === directions.up) {\n\t\t\t\t\t\ty -= speed;\n\t\t\t\t\t}\n\t\t\t\t\tcharacter.setAttribute(\"facing\", heldDirection);\n\t\t\t\t}\n\t\t\t\tcharacter.setAttribute(\"walking\", heldDirection ? \"true\" : \"false\");\n\n\t\t\t\t// wall boundaries\n\t\t\t\tvar leftLimit = 35;\n\t\t\t\tvar rightLimit = 16 * 9 + 2;\n\t\t\t\tvar topLimit = -8 + 35;\n\t\t\t\tvar bottomLimit = 16 * 7 + 24;\n\t\t\t\tif (x < leftLimit) {\n\t\t\t\t\tx = leftLimit;\n\t\t\t\t}\n\t\t\t\tif (x > rightLimit) {\n\t\t\t\t\tx = rightLimit;\n\t\t\t\t}\n\t\t\t\tif (y < topLimit) {\n\t\t\t\t\ty = topLimit;\n\t\t\t\t}\n\t\t\t\tif (y > bottomLimit) {\n\t\t\t\t\ty = bottomLimit;\n\t\t\t\t}\n\n\t\t\t\tvar camera_left = pixelSize * 75;\n\t\t\t\tvar camera_top = pixelSize * 41;\n\n\t\t\t\tmap.style.transform = `translate3d( ${\n\t\t\t\t\t-x * pixelSize + camera_left\n\t\t\t\t}px, ${-y * pixelSize + camera_top}px, 0 )`;\n\t\t\t\tcharacter.style.transform = `translate3d( ${x * pixelSize}px, ${\n\t\t\t\t\ty * pixelSize\n\t\t\t\t}px, 0 )`;\n\t\t\t};\n\n\t\t\t// set up the game loop\n\t\t\tconst step = () => {\n\t\t\t\tplaceCharacter();\n\t\t\t\twindow.requestAnimationFrame(() => {\n\t\t\t\t\tstep();\n\t\t\t\t});\n\t\t\t};\n\t\t\tstep();\n\n\t\t\t// open modal on space bar\n\t\t\tconst openModal = async () => {\n\t\t\t\tconsole.log(x, y);\n\t\t\t\tif (x >= 34 && x <= 42 && y >= 50 && y <= 60) {\n\t\t\t\t\tsetPiece(0);\n\t\t\t\t\thandleShow();\n\t\t\t\t\t// console.log(\"Modal opened for NFT 1\");\n\t\t\t\t} else if (x >= 85 && x <= 95 && y >= 72 && y <= 82) {\n\t\t\t\t\tsetPiece(1);\n\t\t\t\t\thandleShow();\n\t\t\t\t\t// console.log(\"Modal opened for NFT 2\");\n\t\t\t\t} else if (x >= 141 && x <= 151 && y >= 89 && y <= 99) {\n\t\t\t\t\tsetPiece(2);\n\t\t\t\t\thandleShow();\n\t\t\t\t\t// console.log(\"Modal opened for NFT 3\");\n\t\t\t\t} else if (x >= 30 && x <= 40 && y >= 100 && y <= 110) {\n\t\t\t\t\tsetPiece(3);\n\t\t\t\t\thandleShow();\n\t\t\t\t\t// console.log(\"Modal opened for NFT 4\");\n\t\t\t\t} else if (x >= 85 && x <= 95 && y >= 22 && y <= 32) {\n\t\t\t\t\tsetPiece(4);\n\t\t\t\t\thandleShow();\n\t\t\t\t\t// console.log(\"Modal opened for NFT 5\");\n\t\t\t\t} else if (x >= 87 && x <= 92 && y >= 132 && y <= 136) {\n\t\t\t\t\talert(`Please don't go!`);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\talert(`Try landing on a green dot for art!`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// key listener for space\n\t\t\tdocument.addEventListener(\"keydown\", (event) => {\n\t\t\t\tif (event.keyCode === 32) {\n\t\t\t\t\topenModal();\n\t\t\t\t\t// console.log(x, y);\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//direction key state\n\t\t\tconst directions = {\n\t\t\t\tup: \"up\",\n\t\t\t\tdown: \"down\",\n\t\t\t\tleft: \"left\",\n\t\t\t\tright: \"right\",\n\t\t\t};\n\t\t\tconst keys = {\n\t\t\t\t38: directions.up,\n\t\t\t\t37: directions.left,\n\t\t\t\t39: directions.right,\n\t\t\t\t40: directions.down,\n\t\t\t};\n\t\t\tdocument.addEventListener(\"keydown\", (e) => {\n\t\t\t\tvar dir = keys[e.which];\n\t\t\t\tif (dir && heldDirections.indexOf(dir) === -1) {\n\t\t\t\t\theldDirections.unshift(dir);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdocument.addEventListener(\"keyup\", (e) => {\n\t\t\t\tvar dir = keys[e.which];\n\t\t\t\tvar index = heldDirections.indexOf(dir);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\theldDirections.splice(index, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// end of player movement logic\n\n\t\t\ttry {\n\t\t\t\t// Load web3\n\t\t\t\tawait loadWeb3();\n\t\t\t\t// Load Blockchain data\n\t\t\t\tawait loadBlockchainData();\n\t\t\t} catch (error) {\n\t\t\t\t// Catch any errors for any of the above operations.\n\t\t\t\talert(\n\t\t\t\t\t`Failed to load web3, accounts, or contract. Check console for details.`\n\t\t\t\t);\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t};\n\t\tinit();\n\t}, [nftCollection, accounts, balance]);\n\n\tif (typeof web3 === \"undefined\") {\n\t\treturn <div>Loading Web3, accounts, and contract...</div>;\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"Header\">NFT GALLERY</h1>\n\t\t\t<button onClick={() => addCurrentMinter(accounts)} className=\"loadBtn\">\n\t\t\t\tAdd Minter\n\t\t\t</button>\n\t\t\t<button onClick={mintAllNfts} className=\"loadBtn\">\n\t\t\t\tLoad NFTs\n\t\t\t</button>\n\t\t\t<button onClick={checkMintedTokens} className=\"loadBtn\">\n\t\t\t\tCheck Qty Minted: {totalTokensMinted}\n\t\t\t</button>\n\t\t\t<button onClick={loadState} className=\"loadBtn\">\n\t\t\t\tLoad State\n\t\t\t</button>\n\t\t\t<p className=\"directions\">\n\t\t\t\tUse the arrow keys to move and the space bar to select a piece.\n\t\t\t</p>\n\t\t\t<div className=\"camera\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"map background-img\"\n\t\t\t\t\talt=\"mapping\"\n\t\t\t\t\t// src=\"../assets/Gallery-Base.png\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"Character\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tclassName=\"Character_spritesheet pixelart\"\n\t\t\t\t\t\t\talt=\"characer\"\n\t\t\t\t\t\t\tsrc=\"./Sprite-BG.png\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"popWrap\">\n\t\t\t\t<Popup\n\t\t\t\t\tonClose={handleClose}\n\t\t\t\t\tcontract={contract}\n\t\t\t\t\taccounts={accounts}\n\t\t\t\t\tbalance={balance}\n\t\t\t\t\tshow={show}\n\t\t\t\t\ttotalTokensOwnedByAccount={totalTokensOwnedByAccount}\n\t\t\t\t\tpiece={piece}\n\t\t\t\t\tnftCollection={nftCollection}\n\t\t\t\t\tbuyToken={buyToken}\n\t\t\t\t\ttokenIds={tokenIds}\n\t\t\t\t\ttokenURIs={tokenURIs}\n\t\t\t\t\towners={owners}\n\t\t\t\t\ttitles={titles}\n\t\t\t\t\tartists={artists}\n\t\t\t\t\tprices={prices}\n\t\t\t\t\tnumberOfTransfers={numberOfTransfers}\n\t\t\t\t\t// isToggled={isToggled}\n\t\t\t\t\ttoggleForSale={toggleForSale}\n\t\t\t\t\ttoggleStates={toggleStates}\n\t\t\t\t\t// getForSale={getForSale}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}